#import "@preview/ctheorems:1.1.3": *
#show: thmrules.with(qed-symbol: $square$)

#let theorem = thmbox("theorem", "Theorem", fill: rgb("#eeffee"))
#let definition = thmbox("definition", "Definition", fill: rgb("#e8e8f8"))

#let proof = thmproof("proof", "Proof")

#let mathrm(x) = {
  return $sans(upright(#x))$
}

= Exercise 1.13

#theorem(number: "")[
  Prove that $"Fib"(n)$ is the closest integer to $phi^n \/ sqrt(5)$, 
  where $phi=(1+sqrt(5))\/2$.
]

#proof[
  First we will use induction to prove that

  $ "Fib"(n)=1/sqrt(5)[((1+sqrt(5))/2)^n-((1-sqrt(5))/2)^n] $

  We will use $phi$ to denote $(1+sqrt(5))\/2$ and $psi$ to denote 
  $(1-sqrt(5))\/2$ in inline math environment. For $n=0$, we know 
  $"Fib"(0)=(0-0)\/sqrt(5)=0$. For $n=1$

  $ "Fib"(1)=1/sqrt(5)((1+sqrt(5))/2-(1-sqrt(5))/2)=1 $

  For $k, k>=1, k in NN$, we assume that $"Fib"(n)$ is such the form 
  and so on as $"Fib"(k+1)$, now we want to prove that $"Fib"(k+2)$ 
  is also such form:

  $ 
    "Fib"(k+2)&="Fib"(k+1)+"Fib"(k) \
    &=1/sqrt(5)[((1+sqrt(5))/2)^(k+1)-((1-sqrt(5))/2)^(k+1)]\
    &+1/sqrt(5)[((1+sqrt(5))/2)^k-((1-sqrt(5))/2)^k] \
    &=1/sqrt(5)[((1+sqrt(5))/2)^k ((3+sqrt(5))/2)-((1-sqrt(5))/2)^k 
      ((3-sqrt(5))/2)]
  $

  Where we know that

  $ (3+sqrt(5))/2=((1+sqrt(5))/2)^2,(3-sqrt(5))/2=((1-sqrt(5))/2)^2 $

  So $"Fib"(k+2)$ is also such form. We have proofed that 
  $"Fib"(n)=(phi^n-psi^n)\/sqrt(5)$. Now we want to prove that $"Fib"(n)$ 
  is the closest integer of $phi^n\/sqrt(5)$. And that's to prove

  $ 1/sqrt(5)abs(((1-sqrt(5))/2)^n)=1/sqrt(5)((sqrt(5)-1)/2)^n < 1/2 $

  And that's easy to prove, because $a_n=(-psi)^n\/sqrt(5)$ is a decreasing 
  geometric sequence. So $a_n <= a_1=-psi\/sqrt(5)$. That's to prove

  $ (5-sqrt(5))/10 < 1/2 $

  It's obviously true. So the proposition holds.
]

= Exercise 1.14

#theorem(number: "")[
  Draw the tree illustrating the process generated by $sans("count-change")$ 
  procedure in making change for 11 cents. What are the orders of growth of 
  the space and number of steps used by this process as the amount to be 
  changed increases?
]

#proof[
  Consider to use a sequence $a_1, a_2, dots.c, a_k$ (assume in ascending 
  order) to denote $k$ kinds of changes which have different denominations
  , and use $N$ to denote the amount.

  Since this is a recursive process, the orders of growth of the space is 
  proportional to the depth of the recursive tree. And that's (because 
  $min(a_1,a_2,dots.c,a_k)=a_1$ can be seen as a constant):

  $ Theta (N / a_1)=Theta (N) $

  We focus on counting the call of $sans("counter-change-iter")$, and we use 
  $S(n,m)$ to denote the number of different ways of counting changes for 
  amount $n$ using $m$ types of coin.

  - $m=0$, they are the leaves of this recursive tree and have no children;
  - $m=1$, there are $floor(n\/a_1)$ nodes from ($sans("count-change-iter n 1")$) 
  to ($sans("count-change-iter 1 1")$), which will recurse after using the last 
  type of coin. And there are $floor(n\/a_1)$ nodes from 
  ($sans("count-change-iter n 0")$) to ($sans("count-change-iter 1 0")$). And 
  finally a node ($sans("count-change-iter 0 1")$), if $n$ can be divided by 
  $a_1$, so it's

  $ S(n,1)=2 floor(n/a_1)+1 $
  - $m=2$, similarly we can analyze that there is at most $floor(n\/a_2)+1$ 
  times you can subtract $a_2$ cents before reaching zero or a negative value. 
  We have

  $ 
    S(n,2)&=2 floor(n/a_2)+1+sum_(i=0)^(floor(n\/a_1)) S(n-a_2i,1) \
    &=2 floor(n/a_2)+1+sum_(i=0)^(floor(n\/a_1)) (2 floor((n-a_2i)/a_1)+1) \
    &=2 floor(n/a_2)+1+floor((2 n^2)/a_1^2+(2n)/a_1^2+(2n)/a_1+1)-sum_(i=0)^
      (floor(n\/a_1))floor((-2 a_2 i)/a_1) \
    &approx Theta(n^2)
  $
  - $m=k$, using the same process above we can have $S(n,k) approx Theta(n^k)$

  So the orders of growth of number of steps is $Theta(N^k)$
]

= Exercise 1.19

#theorem(number: "")[
  Recall the transformation of the state variables $a$ and 
  $b$ in the #mathrm("fib-iter") process of Section 1.2.2: 
  $a <- a + b$ and $b <- a$. 
  Call this transformation $T$, and observe that applying $T$ over 
  and over again $n$ times, starting with $1$ and $0$, produces the pair 
  $"Fib"(n + 1)$ and $"Fib"(n)$.

  In other words, the Fibonacci numbers are produced by applying $T^n$, the 
  nth power of the transformation $T$, starting with the pair $(1,0)$. Now 
  consider $T$ to be the special case of $p=0$ and $q=1$ in a family of 
  transformations $T_(p q)$, where $T_(p q)$ transforms the pair $(a,b)$ 
  according to $a <- b q + a q + a p$ and $b <- b p + a q$.

  SHo
]

#proof[

]