$test-list = 1 2 3

// The subscript operator allows us to grab a value inside an expression
// via index (zero-based). Negative index values starts with the last
// element in the expression.

.foo
  content-boolean-1: !0             // true
  content-boolean-2: !!0            // false
  content-boolean-3: !1             // false
  content-boolean-4: !!5px          // true
  content-boolean-5: not true       // false
  content-boolean-6: true and false // false
  content-boolean-7: true or false  // true

  content-number-1: -5px  // -5px
  content-number-2: --5px // 5px

  content-list-1: $test-list[0]  // 1
  content-list-2: $test-list[-1] // 3

// Parenthesized expressions may act as tuples `(15px 5px)` `(1 2 3)`

add(a, b)
  if a is a "unit" and b is a "unit"
    return a + b
  else
    return (error "a and b must be units!")

.foo
  content-tuple-1: add(1, 2)                // 3
  content-tuple-2: add(1, "5")              // error "a and b must be units!"
  content-tuple-3: add(1, "5")[0]           // error
  content-tuple-4: add(1, "5")[0] == error  // true
  content-tuple-5: add(1, "5")[1]           // "a and b must be units!"

  content-range-1: 1..5   // 1 2 3 4 5
  content-range-2: 1...5  // 1 2 3 4
  content-range-3: 5..1   // 5 4 3 2 1

  content-additive-1: 15px - 5px      // 10px
  content-additive-2: 5 - 2           // 3
  content-additive-3: 5in - 50mm      // 3.031496062992126in
  content-additive-4: 5s - 1000ms     // 4s
  content-additive-5: "foo " + "bar"  // 'foo bar'
  content-additive-6: "num " + 15     // 'num 15'

  content-multiplicative-1: 2000ms + (1s * 2)
  content-multiplicative-2: 5s / 2
  content-multiplicative-3: 4 % 2

  content-exponent-1: 2 ** 8    // 256
  content-exponent-2: 0.3 ** 4  // 0.0081

  // When using `/` within a property value, you must wrap with parens. Otherwise the
  // `/` is taken literally

  font: 14px / 1.5    // 14px/1.5
  font: (14px / 1.5)  // 9.333333333333334px

$test-shorthand = 1

.foo
  content-shorthand-1: $test-shorthand  // 1

$test-shorthand += 3

.foo
  content-shorthand-2: $test-shorthand  // 4

// Shorthand operators works like other common language, with list variable, the
// first value will be use to execute the operators and overwrite the list to
// turn it to a single-value variable.

// With string, only += works as an appending function

// With number type value, all operators work exactly like a normal math.
// Similar for color value

$overwrite-list-1 = 12..7
$overwrite-list-2 = node 23 "str"
$shorthand-color = #123123

.foo
  content-shorthand-3: $overwrite-list-1 %= 2       // 0
  content-shorthand-4: $overwrite-list-2 += 2       // node2
  content-shorthand-5: $shorthand-color -= #087212  // #0a0011

  content-eq-1: 5 == 5              // true
  content-eq-2: 10 > 5              // true
  content-eq-3: "hey" is not "bye"  // true
  content-eq-4: "hey" isnt "hey"    // false
  content-eq-5: (1 2) == (2 1)      // false
  content-eq-6: (1 2) is (2 1)      // false

  // aliases:
  //  == is
  //  != is not
  //  != isnt
  //  && and
  //  || or

  $test-words = foo bar baz
  $test-tuple = (1 "one") (2 "two")

  content-existence-1: 1 in (1 2 3)             // true
  content-existence-2: 5 in (1 2 3)             // false
  content-existence-3: foo in $test-words       // true
  content-existence-4: BAZ in $test-words       // false
  content-existence-5: 1 in $test-tuple         // false
  content-existence-6: (1 "one") in $test-tuple // true

// Nearly everything within Stylus resolves to `true`, including units with a suffix
// Even `0px` and `0%` etc will resolve to `true`. However, `0` itself is `false` in
// terms of arithmetic.

// Expressions or lists with a length greater than 1 are considered truthy

// The conditional assignment operator `?=` aliased as `:=` lets us defined variables
// without clobbering old values (if present). This operator expands to an `is defined`
// binary operation within a ternary

.foo
  $test-color-1 = red
  $test-color-2 = $test-color-1 is defined ? blue : white
  $test-color-3 ?= white
  $test-color-3 := black

  for index in 1..3
    content-cond-{index}: lookup("$test-color-" + index)

// Stylus provides a binary operator named `is a` used to type check. Alternatively
// we could use the `type()` BIF

.foo
  content-type-1: 15 is a "unit"      // true
  content-type-2: #fff is a "rgba"    // true
  content-type-3: add is a "function" // true
  content-type-4: "s" is a "string"   // true
  content-type-5: true is a "boolean" // true

  content-type-6: typeof(15)      // "unit"
  content-type-7: typeof(typeof)  // "function"
  content-type-8: typeof("as")    // "string"
  content-type-9: typeof((1 2 3)) // "unit"
  content-type-10: typeof(())     // "null"
  content-type-11: typeof(null)   // "null"
  content-type-12: typeof(#123)   // "rgba"
  content-type-13: typeof(true)   // "boolean"
  content-type-14: typeof(foo)    // "ident"
  content-type-15: typeof(1px)    // "unit"
  content-type-16: typeof(1..3)   // "unit"
  content-type-17: typeof(1s)     // "unit"
  content-type-18: typeof(0.2)    // "unit"

// `is defined` operator checks if a variable has a value assigned to it.

.foo
  content-defined-1: $test-undefined is defined // false
  content-defined-2: $test-color-1 is defined   // false, in another scope
  content-defined-3: $test-shorthand is defined // true

  content-defined-4: typeof(lookup("$test-undefined"))  // null